import RPi.GPIO as GPIO
import time

# Define the pin numbers for the sensors
TRIG = 11
ECHO = 12
BUZZER = 13
MOTION = 18

def setup():
    GPIO.setmode(GPIO.BOARD)
    GPIO.setwarnings(False)
    GPIO.setup(TRIG, GPIO.OUT)
    GPIO.setup(ECHO, GPIO.IN)
    GPIO.setup(BUZZER, GPIO.OUT)
    GPIO.setup(MOTION, GPIO.IN)

def distance():
    # Set the trigger to HIGH
    GPIO.output(TRIG, GPIO.HIGH)

    # Set the trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(TRIG, GPIO.LOW)

    StartTime = time.time()
    StopTime = time.time()

    # Save StartTime
    while GPIO.input(ECHO) == 0:
        StartTime = time.time()

    # Save time of arrival
    while GPIO.input(ECHO) == 1:
        StopTime = time.time()

    # Time difference between start and arrival
    TimeElapsed = StopTime - StartTime

    # Multiply with the speed of sound (34300 cm/s) and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2

    return distance

import RPi.GPIO as GPIO
import time

# Define the pin numbers for the sensors
TRIG = 11
ECHO = 12
BUZZER = 13
MOTION = 18

def setup():
    GPIO.setmode(GPIO.BOARD)
    GPIO.setwarnings(False)
    GPIO.setup(TRIG, GPIO.OUT)
    GPIO.setup(ECHO, GPIO.IN)
    GPIO.setup(BUZZER, GPIO.OUT)
    GPIO.setup(MOTION, GPIO.IN)

def distance():
    # Set the trigger to HIGH
    GPIO.output(TRIG, GPIO.HIGH)

    # Set the trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(TRIG, GPIO.LOW)

    StartTime = time.time()
    StopTime = time.time()

    # Save StartTime
    while GPIO.input(ECHO) == 0:
        StartTime = time.time()

    # Save time of arrival
    while GPIO.input(ECHO) == 1:
        StopTime = time.time()

    # Time difference between start and arrival
    TimeElapsed = StopTime - StartTime

    # Multiply with the speed of sound (34300 cm/s) and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2

    return distance

def waitForMotion():
    while True:
        i = GPIO.input(MOTION)
        if i == 1:
            break

def waitForNoMotion():
    while True:
        i = GPIO.input(MOTION)
        if i == 0:
            break

def loop():
    try:
        while True:
            waitForMotion()
            dis = distance()
            print(f'Distance: {dis:.2f} inches')
            if dis <= 30:
                GPIO.output(BUZZER, GPIO.LOW)
            else:
                GPIO.output(BUZZER, GPIO.HIGH)
            waitForNoMotion()
    except KeyboardInterrupt:
        destroy()

def destroy():
    GPIO.cleanup()

if __name__ == "__main__":
    setup()
    try:
        loop()
    except KeyboardInterrupt:
        destroy()

def loop():
    try:
        while True:
            waitForMotion()
            dis = distance()
            print(f'Distance: {dis:.2f} inches')
            if dis <= 30:
                GPIO.output(BUZZER, GPIO.LOW)
            else:
                GPIO.output(BUZZER, GPIO.HIGH)
            waitForNoMotion()
    except KeyboardInterrupt:
        destroy()

def destroy():
    GPIO.cleanup()

if __name__ == "__main__":
    setup()
    try:
        loop()
    except KeyboardInterrupt:
        destroy()
