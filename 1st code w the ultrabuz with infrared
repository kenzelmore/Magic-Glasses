import RPi.GPIO as GPIO  # Import the RPi.GPIO library for Raspberry Pi GPIO operations
import time  # Import the time module for adding delays in the program

# Define GPIO pin numbers for sensors
TRIG = 11  # GPIO pin for the TRIG pin of the ultrasonic sensor
ECHO = 12  # GPIO pin for the ECHO pin of the ultrasonic sensor
BUZZER = 13  # GPIO pin for the buzzer
MOTION = 18  # GPIO pin for the motion sensor

# Function to set up the GPIO configuration
def setup():
    GPIO.setmode(GPIO.BOARD)  # Set the GPIO mode to use board pin numbers
    GPIO.setwarnings(False)  # Disable GPIO warnings
    GPIO.setup(TRIG, GPIO.OUT)  # Set TRIG pin as an output
    GPIO.setup(ECHO, GPIO.IN)   # Set ECHO pin as an input
    GPIO.setup(BUZZER, GPIO.OUT)  # Set BUZZER pin as an output
    GPIO.setup(MOTION, GPIO.IN)  # Set MOTION pin as an input

# Function to measure the distance using the ultrasonic sensor
def distance():
    GPIO.output(TRIG, GPIO.HIGH)  # Set the trigger to HIGH
    time.sleep(0.00001)  # Wait for 0.01ms
    GPIO.output(TRIG, GPIO.LOW)  # Set the trigger to LOW

    StartTime = time.time()
    StopTime = time.time()

    # Save StartTime
    while GPIO.input(ECHO) == 0:
        StartTime = time.time()

    # Save time of arrival
    while GPIO.input(ECHO) == 1:
        StopTime = time.time()

    # Time difference between start and arrival
    TimeElapsed = StopTime - StartTime

    # Multiply with the speed of sound (34300 cm/s) and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2

    return distance

# Function to wait for motion detection
def waitForMotion():
    while True:
        i = GPIO.input(MOTION)
        if i == 1:
            break

# Function to wait for no motion
def waitForNoMotion():
    while True:
        i = GPIO.input(MOTION)
        if i == 0:
            break

# Main loop of the program
def loop():
    try:
        while True:
            waitForMotion()  # Wait for motion to be detected
            dis = distance()  # Get the distance measured by the ultrasonic sensor
            print(f'Distance: {dis:.2f} inches')  # Print the distance in inches with 2 decimal places
            if dis <= 30:  # If the distance is less than or equal to 30 inches
                GPIO.output(BUZZER, GPIO.LOW)  # Turn off the buzzer
            else:
                GPIO.output(BUZZER, GPIO.HIGH)  # Turn on the buzzer
            waitForNoMotion()  # Wait for motion to stop
    except KeyboardInterrupt:
        destroy()  # Call the destroy function if the program is interrupted by a keyboard interrupt

# Function to clean up GPIO settings when the program is terminated
def destroy():
    GPIO.cleanup()  # Cleanup GPIO settings

# Main entry point of the program
if __name__ == "__main__":
    setup()  # Call the setup function to initialize GPIO settings
    try:
        loop()  # Call the main loop function
    except KeyboardInterrupt:
        destroy()  # Call the destroy function if the program is interrupted by a keyboard interrupt
