#!/usr/bin/env python3

import RPi.GPIO as GPIO
import time

# Define GPIO pin numbers for ultrasonic sensor
TRIG = 11  # GPIO pin for the TRIG pin of the ultrasonic sensor
ECHO = 12  # GPIO pin for the ECHO pin of the ultrasonic sensor

# Define GPIO pin number for the active buzzer
BUZZER = 13

# Set the distance threshold for activating the buzzer (in centimeters)
DISTANCE_THRESHOLD = 30

def setup():
    # Set up the GPIO configuration
    GPIO.setmode(GPIO.BOARD)  # Use board pin numbers
    GPIO.setwarnings(False)   # Disable GPIO warnings
    GPIO.setup(TRIG, GPIO.OUT)  # Set TRIG pin as an output
    GPIO.setup(ECHO, GPIO.IN)   # Set ECHO pin as an input
    GPIO.setup(BUZZER, GPIO.OUT)  # Set BUZZER pin as an output
    GPIO.output(BUZZER, GPIO.LOW)  # Ensure the buzzer is initially turned off

def measure_distance():
    # Measure distance using the ultrasonic sensor
    GPIO.output(TRIG, 0)
    time.sleep(0.000002)

    GPIO.output(TRIG, 1)
    time.sleep(0.00001)
    GPIO.output(TRIG, 0)

    while GPIO.input(ECHO) == 0:
        pass
    time1 = time.time()
    while GPIO.input(ECHO) == 1:
        pass
    time2 = time.time()

    during = time2 - time1
    distance = during * 340 / 2 * 100  # Convert to centimeters
    return distance

def activate_buzzer():
    # Activate the buzzer by setting the GPIO pin to HIGH
    GPIO.output(BUZZER, GPIO.HIGH)

def deactivate_buzzer():
    # Deactivate the buzzer by setting the GPIO pin to LOW
    GPIO.output(BUZZER, GPIO.LOW)

def main():
    try:
        setup()
        while True:
            distance = measure_distance()
            print(f'Distance: {distance:.2f} cm')

            if distance < DISTANCE_THRESHOLD:
                activate_buzzer()  # Activate the buzzer if the distance is below the threshold
            else:
                deactivate_buzzer()  # Deactivate the buzzer if the distance is above the threshold

            time.sleep(0.1)

    except KeyboardInterrupt:
        pass
    finally:
        GPIO.cleanup()  # Clean up GPIO settings when the program is terminated

if __name__ == "__main__":
    main()  # Start the main function when the script is executed
